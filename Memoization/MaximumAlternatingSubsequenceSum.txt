#include<bits/stdc++.h>
using namespace std;

vector<vector<int>> dp(10000, vector<int>(2, -1));

int solve(vector<int> &arr, int n, int idx, bool flag) {
    if(idx >= n) {
        return 0;
    }
    
    if(dp[idx][flag] != -1) {
        return dp[idx][flag];
    }
    
    int skip = solve(arr, n, idx + 1, flag);
    int val = arr[idx];
    if(flag == false) {
        val = -val;
    }
    int take = solve(arr, n, idx + 1, !flag) + val;
    
    return dp[idx][flag] = max(skip, take);
}

int main() {
    
    vector<int> arr = {4, 2, 5, 3};
    int n = arr.size();
    
    int result = solve(arr, n, 0, true);
    cout<<"Maximum alternating subsequence sum :- "<<result;
    
    return 0;
}
